services:
  db:
    image: postgres:16
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - '${DB_PORT_EXTERNAL:-5444}:${DB_PORT:-5432}'
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

  test:
    develop:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    restart: always
    ports:
      - '${PORT:-3000}:${PORT:-3000}'
    env_file:
      - .env
    entrypoint: ['sh', './scripts/npmrun.sh']
    depends_on:
      db:
        condition: service_healthy

  app:
    develop:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    restart: always
    ports:
      - '${PORT:-3000}:${PORT:-3000}'
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${PORT:-3000}/api/v1/health']
      interval: '10s' # How often to check (adjust as needed)
      timeout: 5s # Timeout for each attempt
      retries: 3 # Number of retries before marking as unhealthy
      start_period: 10s # Time to wait before the first checks

  develop:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    restart: always
    ports:
      - '${PORT:-3000}:${PORT:-3000}'
    env_file:
      - .env
    depends_on:
      - migrate
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${PORT:-3000}/api/v1/health']
      interval: '10s'
      timeout: 5s
      retries: 3 
      start_period: 10s 
    develop:
      watch:
        - action: sync
          path: ./src
          target: /usr/src/app/src
        - action: rebuild
          path: package.json

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    command: npm run migration:run
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  migrate_revert:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    entrypoint: npm run migration:revert || true
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  generate_migration:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    entrypoint: ['sh', './scripts/generate-migration.sh']
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src/migrations:/usr/src/app/src/migrations

x-develop:
  deveop:
    watch:
      - path: ./src
        action: sync
        target: /usr/src/app/src
      - path: package.json
        action: rebuild
volumes:
  postgres_data:
    driver: local
